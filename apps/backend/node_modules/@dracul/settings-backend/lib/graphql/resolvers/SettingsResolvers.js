"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));

var _SettingsService = require("../../services/SettingsService");

var _apolloServerExpress = require("apollo-server-express");

var _Settings = require("../../permissions/Settings");

var _default = {
  Query: {
    settingsFind: function settingsFind(_, _ref, _ref2) {
      var id = _ref.id;
      var user = _ref2.user,
          rbac = _ref2.rbac;
      //  if (!user) throw new AuthenticationError("Unauthenticated")
      //  if(!rbac.isAllowed(user.id, SETTINGS_SHOW)) throw new ForbiddenError("Not Authorized")
      return (0, _SettingsService.findSettings)(id);
    },
    settingsFindByKey: function settingsFindByKey(_, _ref3, _ref4) {
      var Key = _ref3.Key;
      var user = _ref4.user,
          rbac = _ref4.rbac;
      //  if (!user) throw new AuthenticationError("Unauthenticated")
      //  if(!rbac.isAllowed(user.id, SETTINGS_SHOW)) throw new ForbiddenError("Not Authorized")
      return (0, _SettingsService.findSettingsByKey)(key);
    },
    settingsFetch: function settingsFetch(_, _ref5, _ref6) {
      (0, _objectDestructuringEmpty2["default"])(_ref5);
      var user = _ref6.user,
          rbac = _ref6.rbac;
      //   if (!user) throw new AuthenticationError("Unauthenticated")
      //  if(!rbac.isAllowed(user.id, SETTINGS_SHOW)) throw new ForbiddenError("Not Authorized")
      return (0, _SettingsService.fetchSettings)();
    },
    settingsPaginate: function settingsPaginate(_, _ref7, _ref8) {
      var pageNumber = _ref7.pageNumber,
          itemsPerPage = _ref7.itemsPerPage,
          search = _ref7.search,
          orderBy = _ref7.orderBy,
          orderDesc = _ref7.orderDesc;
      var user = _ref8.user,
          rbac = _ref8.rbac;
      if (!user) throw new _apolloServerExpress.AuthenticationError("Unauthenticated");
      if (!rbac.isAllowed(user.id, _Settings.SETTINGS_SHOW)) throw new _apolloServerExpress.ForbiddenError("Not Authorized");
      return (0, _SettingsService.paginateSettings)(pageNumber, itemsPerPage, search, orderBy, orderDesc);
    }
  },
  Mutation: {
    settingsCreate: function settingsCreate(_, _ref9, _ref10) {
      var input = _ref9.input;
      var user = _ref10.user,
          rbac = _ref10.rbac;
      if (!user) throw new _apolloServerExpress.AuthenticationError("Unauthenticated");
      if (!rbac.isAllowed(user.id, _Settings.SETTINGS_CREATE)) throw new _apolloServerExpress.ForbiddenError("Not Authorized");
      return (0, _SettingsService.createSettings)(user, input);
    },
    settingsUpdate: function settingsUpdate(_, _ref11, _ref12) {
      var id = _ref11.id,
          input = _ref11.input;
      var user = _ref12.user,
          rbac = _ref12.rbac;
      if (!user) throw new _apolloServerExpress.AuthenticationError("Unauthenticated");
      if (!rbac.isAllowed(user.id, _Settings.SETTINGS_UPDATE)) throw new _apolloServerExpress.ForbiddenError("Not Authorized");
      return (0, _SettingsService.updateSettings)(user, id, input);
    },
    settingsDelete: function settingsDelete(_, _ref13, _ref14) {
      var id = _ref13.id;
      var user = _ref14.user,
          rbac = _ref14.rbac;
      if (!user) throw new _apolloServerExpress.AuthenticationError("Unauthenticated");
      if (!rbac.isAllowed(user.id, _Settings.SETTINGS_DELETE)) throw new _apolloServerExpress.ForbiddenError("Not Authorized");
      return (0, _SettingsService.deleteSettings)(id);
    }
  }
};
exports["default"] = _default;