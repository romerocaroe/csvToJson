"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SettingCache = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _SettingsService = require("../services/SettingsService");

var SettingCacheManager = /*#__PURE__*/function () {
  function SettingCacheManager() {
    (0, _classCallCheck2["default"])(this, SettingCacheManager);
    this.settings = {};
  }

  (0, _createClass2["default"])(SettingCacheManager, [{
    key: "getTimestampInSeconds",
    value: function getTimestampInSeconds() {
      return Math.floor(Date.now() / 1000);
    }
  }, {
    key: "setSetting",
    value: function setSetting(key, value) {
      var ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;
      var setting = {
        key: key,
        value: value,
        ttl: ttl,
        expiration: this.getTimestampInSeconds() + ttl
      };
      this.settings[key] = setting;
    }
  }, {
    key: "getSettingValue",
    value: function () {
      var _getSettingValue = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(key, ttl) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.isCached(key)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", this.settings[key].value);

              case 2:
                _context.next = 4;
                return this.getSettingValueFromDb(key, ttl);

              case 4:
                return _context.abrupt("return", _context.sent);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getSettingValue(_x, _x2) {
        return _getSettingValue.apply(this, arguments);
      }

      return getSettingValue;
    }()
  }, {
    key: "hasSetting",
    value: function hasSetting(key) {
      return !!this.settings[key];
    }
  }, {
    key: "isCached",
    value: function isCached(key) {
      if (!this.hasSetting(key)) return false;

      if (this.settings[key].expiration > this.getTimestampInSeconds()) {
        return true;
      } else {
        this.clearCache(key);
        return false;
      }
    }
  }, {
    key: "clearCache",
    value: function clearCache(key) {
      delete this.settings[key];
    }
  }, {
    key: "getSettingValueFromDb",
    value: function () {
      var _getSettingValueFromDb = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(key, ttl) {
        var value;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _SettingsService.getSettingsValueByKey)(key);

              case 2:
                value = _context2.sent;

                if (value) {
                  this.setSetting(key, value, ttl);
                }

                return _context2.abrupt("return", value);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getSettingValueFromDb(_x3, _x4) {
        return _getSettingValueFromDb.apply(this, arguments);
      }

      return getSettingValueFromDb;
    }()
  }]);
  return SettingCacheManager;
}();

var cache = new SettingCacheManager();

var SettingCache = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(key, ttl) {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return cache.getSettingValue(key, ttl);

          case 2:
            return _context3.abrupt("return", _context3.sent);

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function SettingCache(_x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();

exports.SettingCache = SettingCache;
var _default = SettingCache;
exports["default"] = _default;