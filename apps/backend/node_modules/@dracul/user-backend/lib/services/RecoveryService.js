"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recoveryPasswordByCode = exports.recoveryPassword = exports.recoveryChangePasswordCode = exports.recoveryChangePassword = void 0;

var _loggerBackend = require("@dracul/logger-backend");

var _UserModel = _interopRequireDefault(require("../models/UserModel"));

var _UserAuditService = require("./UserAuditService");

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _UserEmailManager = _interopRequireDefault(require("./UserEmailManager"));

var _UserService = require("./UserService");

var _validatePasswordLength = _interopRequireDefault(require("./utils/validatePasswordLength"));

var _AuthService = require("./AuthService");

var _SessionService = require("./SessionService");

var _commonBackend = require("@dracul/common-backend");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
    @input email: String
    @output {status:Boolean!,message:String}
 */
const recoveryPassword = function (email) {
  return new Promise((resolve, rejects) => {
    _UserModel.default.findOne({
      email: email
    }).populate('role').then(user => {
      if (user) {
        let token = _jsonwebtoken.default.sign({
          id: user.id,
          role: {
            name: user.role.name
          },
          operation: 'recovery'
        }, process.env.JWT_SECRET, {
          expiresIn: '1d'
        });

        let url = process.env.APP_WEB_URL + "/recovery/" + token;

        _UserEmailManager.default.recovery(email, url, user).then(result => {
          _loggerBackend.DefaultLogger.info('RecoveryService.recoveryPassword successful for ' + user.username);

          (0, _UserAuditService.createUserAudit)(user.id, user.id, 'passwordRecovery');
          resolve({
            status: result,
            message: 'common.operation.success'
          });
        }).catch(err => {
          _loggerBackend.DefaultLogger.error("RecoveryService.recoveryPassword ", err);

          rejects(new Error('common.operation.fail'));
        });
      } else resolve({
        status: false,
        message: "user.notFound"
      });
    }).catch(err => {
      _loggerBackend.DefaultLogger.error("RecoveryService.recoveryPassword ", err);

      rejects(new Error('common.operation.fail'));
    });
  });
};
/*
@input email: String
@output {status:Boolean!,message:String}
*/


exports.recoveryPassword = recoveryPassword;

const recoveryPasswordByCode = function (email) {
  return new Promise((resolve, rejects) => {
    let code = (0, _commonBackend.randomString)(4);

    _UserModel.default.findOneAndUpdate({
      email: email
    }, {
      code: code
    }, {
      new: true
    }).then((error, user) => {
      if (error) {
        _loggerBackend.DefaultLogger.error("RecoveryService.recoveryChangePassword.findOneAndUpdate ", error);

        resolve({
          status: false,
          message: "common.operation.fail"
        });
      }

      (0, _UserAuditService.createUserAudit)(userDecoded.id, userDecoded.id, 'userRecoveryPasswordCodeCreated');

      _UserEmailManager.default.recoveryCode(email, code, user).then(result => {
        _loggerBackend.DefaultLogger.info('RecoveryService.recoveryPassword successful for ' + user.username);

        (0, _UserAuditService.createUserAudit)(user.id, user.id, 'passwordRecovery');
        resolve({
          status: result,
          message: 'common.operation.success'
        });
      }).catch(err => {
        _loggerBackend.DefaultLogger.error("RecoveryService.recoveryPassword ", err);

        rejects(new Error('common.operation.fail'));
      });
    }).catch(err => {
      _loggerBackend.DefaultLogger.error("RecoveryService.recoveryPassword ", err);

      rejects(new Error('common.operation.fail'));
    });
  });
};

exports.recoveryPasswordByCode = recoveryPasswordByCode;

const recoveryChangePasswordCode = function (code, newPassword) {
  return new Promise((resolve, rejects) => {
    _UserModel.default.findOneAndUpdate({
      code: code
    }, {
      password: newPassword
    }).populate('role').populate('groups').exec((error, user) => {
      if (user) {
        resolve({
          status: true,
          message: "common.operation.success"
        });
      } else {
        _loggerBackend.DefaultLogger.error("recoveryChangePasswordCode ", error);

        resolve({
          status: false,
          message: "code fail"
        });
      }
    });
  });
};
/*
    @input (token: String, newPassword:String, actionBy: Object, req: Object )
    @output {status:Boolean!, message:String}
 */


exports.recoveryChangePasswordCode = recoveryChangePasswordCode;

const recoveryChangePassword = function (token, newPassword, req) {
  return new Promise((resolve, rejects) => {
    let userDecoded = _jsonwebtoken.default.verify(token, process.env.JWT_SECRET); //Todo specific message


    if (!userDecoded) {
      resolve({
        status: false,
        message: "common.operation.fail"
      });
    } //Todo specific message


    if (!(0, _validatePasswordLength.default)(newPassword)) {
      resolve({
        status: false,
        message: "common.operation.fail"
      });
    }

    _UserModel.default.findOneAndUpdate({
      _id: userDecoded.id
    }, {
      password: (0, _UserService.hashPassword)(newPassword)
    }, {
      new: true
    }).populate('role').populate('groups').exec((error, user) => {
      if (error) {
        _loggerBackend.DefaultLogger.error("RecoveryService.recoveryChangePassword.findOneAndUpdate ", error);

        resolve({
          status: false,
          message: "common.operation.fail"
        });
      }

      (0, _UserAuditService.createUserAudit)(userDecoded.id, userDecoded.id, 'userRecoveryPasswordChange');
      (0, _SessionService.createSession)(user, req).then(session => {
        const payload = (0, _AuthService.tokenSignPayload)(user, session.id);
        const options = {
          expiresIn: process.env.JWT_LOGIN_EXPIRED_IN || '1d',
          jwtid: user.id
        };

        let token = _jsonwebtoken.default.sign(payload, process.env.JWT_SECRET, options);

        _loggerBackend.DefaultLogger.info('RecoveryService.recoveryChangePassword successful for ' + user.username);

        resolve({
          status: true,
          token: token,
          message: "common.operation.success"
        });
      }).catch(err => {
        _loggerBackend.DefaultLogger.error("RecoveryService.recoveryChangePassword ", err);

        reject(err);
      });
    });
  });
};

exports.recoveryChangePassword = recoveryChangePassword;