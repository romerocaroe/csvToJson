"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _CustomizationService = require("../../services/CustomizationService");

var _apolloServerExpress = require("apollo-server-express");

var _permissions = require("../../permissions");

var _default = {
  Query: {
    customization: (_, {
      id
    }, {
      user,
      rbac
    }) => {
      return (0, _CustomizationService.findCustomization)();
    }
  },
  Mutation: {
    customizationCreate: (_, {
      input
    }, {
      user,
      rbac
    }) => {
      if (!user) throw new _apolloServerExpress.AuthenticationError("Unauthenticated");
      if (!rbac.isAllowed(user.id, _permissions.CUSTOMIZATION_CREATE)) throw new _apolloServerExpress.ForbiddenError("Not Authorized");
      return (0, _CustomizationService.createCustomization)(input);
    },
    customizationUpdate: (_, {
      id,
      input
    }, {
      user,
      rbac
    }) => {
      if (!user) throw new _apolloServerExpress.AuthenticationError("Unauthenticated");
      if (!rbac.isAllowed(user.id, _permissions.CUSTOMIZATION_UPDATE)) throw new _apolloServerExpress.ForbiddenError("Not Authorized");
      return (0, _CustomizationService.updateCustomization)(id, input);
    },
    colorsUpdate: (_, {
      input
    }, {
      user,
      rbac
    }) => {
      if (!user) throw new _apolloServerExpress.AuthenticationError("Unauthenticated");
      if (!rbac.isAllowed(user.id, _permissions.CUSTOMIZATION_COLORS_UPDATE)) throw new _apolloServerExpress.ForbiddenError("Not Authorized");
      return (0, _CustomizationService.updateColors)(input);
    },
    logoUpdate: (_, {
      input
    }, {
      user,
      rbac
    }) => {
      if (!user) throw new _apolloServerExpress.AuthenticationError("Unauthenticated");
      if (!rbac.isAllowed(user.id, _permissions.CUSTOMIZATION_LOGO_UPDATE)) throw new _apolloServerExpress.ForbiddenError("Not Authorized");
      return (0, _CustomizationService.updateLogo)(input);
    },
    langUpdate: (_, {
      input
    }, {
      user,
      rbac
    }) => {
      if (!user) throw new _apolloServerExpress.AuthenticationError("Unauthenticated");
      if (!rbac.isAllowed(user.id, _permissions.CUSTOMIZATION_LANG_UPDATE)) throw new _apolloServerExpress.ForbiddenError("Not Authorized");
      return (0, _CustomizationService.updateLang)(input);
    },
    logoUpload: (_, {
      file
    }, {
      user,
      rbac
    }) => {
      if (!user) throw new _apolloServerExpress.AuthenticationError("Unauthenticated");
      if (!rbac.isAllowed(user.id, _permissions.CUSTOMIZATION_LOGO_UPDATE)) throw new _apolloServerExpress.ForbiddenError("Not Authorized");
      return (0, _CustomizationService.uploadLogo)(file);
    }
  }
};
exports.default = _default;